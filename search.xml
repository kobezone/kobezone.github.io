<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[js-code]]></title>
      <url>/blog/2017/07/19/js-code/</url>
      <content type="html"><![CDATA[<ol>
<li><p>日期格式化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123; <span class="comment">//author: meizz </span></div><div class="line">      <span class="keyword">var</span> o = &#123;</div><div class="line">          <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></div><div class="line">          <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日 </span></div><div class="line">          <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时 </span></div><div class="line">          <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分 </span></div><div class="line">          <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒 </span></div><div class="line">          <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></div><div class="line">          <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒 </span></div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</div><div class="line">      <span class="keyword">return</span> fmt;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>字符串操作</p>
</li>
</ol>
<p>2-1 去除字符串空格<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//去除空格  type 1-所有空格  2-前后空格  3-前空格 4-后空格</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str,type</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)/g</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/(\s*$)/g</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-2字母大小写切换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*type</span></div><div class="line">1: 首字母大写   </div><div class="line">2：首页母小写</div><div class="line">3：大小写转换</div><div class="line">4：全部大写</div><div class="line">5：全部小写</div><div class="line"> * */</div><div class="line"><span class="comment">//changeCase('asdasd',1)</span></div><div class="line"><span class="comment">//Asdasd</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCase</span>(<span class="params">str,type</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span>(type)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/^(\w)(\w+)/</span>,<span class="function"><span class="keyword">function</span> (<span class="params">v,v1,v2</span>)</span>&#123;<span class="keyword">return</span> v1.toUpperCase() + v2.toLowerCase();&#125;);</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/^(\w)(\w+)/</span>,<span class="function"><span class="keyword">function</span> (<span class="params">v,v1,v2</span>)</span>&#123;<span class="keyword">return</span> v1.toLowerCase() + v2.toUpperCase();&#125;);</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/^([a-z]+)([A-Z]+)/</span>,<span class="function"><span class="keyword">function</span> (<span class="params">v,v1,v2</span>)</span>&#123;<span class="keyword">return</span> v1.toUpperCase() + v2.toLowerCase();&#125;);</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> str.toUpperCase();</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:<span class="keyword">return</span> str.toLowerCase();</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-3字符串循环复制<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//repeatStr(str-&gt;字符串, count-&gt;次数)</span></div><div class="line"><span class="comment">//repeatStr('123',3)</span></div><div class="line"><span class="comment">//"123123123"</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatStr</span>(<span class="params">str, count</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        text += str;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> text;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-4字符串替换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串替换(字符串,要替换的字符,替换成什么)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceAll</span>(<span class="params">str,AFindText,ARepText</span>)</span>&#123;</div><div class="line">　　　raRegExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(AFindText,<span class="string">"g"</span>);</div><div class="line">　　　<span class="keyword">return</span> str.replace(raRegExp,ARepText);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-5替换*<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//replaceStr(字符串,字符格式, 替换方式,替换的字符（默认*）)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceStr</span>(<span class="params">str, regArr, type,ARepText</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> regtext = <span class="string">''</span>, Reg = <span class="literal">null</span>,replaceText=ARepText||<span class="string">'*'</span>;</div><div class="line">    <span class="comment">//replaceStr('18819322663',[3,5,3],0)</span></div><div class="line">    <span class="comment">//188*****663</span></div><div class="line">    <span class="comment">//repeatStr是在上面定义过的（字符串循环复制），大家注意哦</span></div><div class="line">    <span class="keyword">if</span> (regArr.length === <span class="number">3</span> &amp;&amp; type === <span class="number">0</span>) &#123;</div><div class="line">        regtext = <span class="string">'(\\w&#123;'</span> + regArr[<span class="number">0</span>] + <span class="string">'&#125;)\\w&#123;'</span> + regArr[<span class="number">1</span>] + <span class="string">'&#125;(\\w&#123;'</span> + regArr[<span class="number">2</span>] + <span class="string">'&#125;)'</span></div><div class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</div><div class="line">        <span class="keyword">var</span> replaceCount = repeatStr(replaceText, regArr[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">return</span> str.replace(Reg, <span class="string">'$1'</span> + replaceCount + <span class="string">'$2'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//replaceStr('asdasdasdaa',[3,5,3],1)</span></div><div class="line">    <span class="comment">//***asdas***</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (regArr.length === <span class="number">3</span> &amp;&amp; type === <span class="number">1</span>) &#123;</div><div class="line">        regtext = <span class="string">'\\w&#123;'</span> + regArr[<span class="number">0</span>] + <span class="string">'&#125;(\\w&#123;'</span> + regArr[<span class="number">1</span>] + <span class="string">'&#125;)\\w&#123;'</span> + regArr[<span class="number">2</span>] + <span class="string">'&#125;'</span></div><div class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</div><div class="line">        <span class="keyword">var</span> replaceCount1 = repeatSte(replaceText, regArr[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">var</span> replaceCount2 = repeatSte(replaceText, regArr[<span class="number">2</span>]);</div><div class="line">        <span class="keyword">return</span> str.replace(Reg, replaceCount1 + <span class="string">'$1'</span> + replaceCount2)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//replaceStr('1asd88465asdwqe3',[5],0)</span></div><div class="line">    <span class="comment">//*****8465asdwqe3</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (regArr.length === <span class="number">1</span> &amp;&amp; type == <span class="number">0</span>) &#123;</div><div class="line">        regtext = <span class="string">'(^\\w&#123;'</span> + regArr[<span class="number">0</span>] +  <span class="string">'&#125;)'</span></div><div class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</div><div class="line">        <span class="keyword">var</span> replaceCount = repeatSte(replaceText, regArr[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> str.replace(Reg, replaceCount)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//replaceStr('1asd88465asdwqe3',[5],1,'+')</span></div><div class="line">    <span class="comment">//"1asd88465as+++++"</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (regArr.length === <span class="number">1</span> &amp;&amp; type == <span class="number">1</span>) &#123;</div><div class="line">        regtext = <span class="string">'(\\w&#123;'</span> + regArr[<span class="number">0</span>] +  <span class="string">'&#125;$)'</span></div><div class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</div><div class="line">        <span class="keyword">var</span> replaceCount = repeatSte(replaceText, regArr[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> str.replace(Reg, replaceCount)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ES8中采用<span class="string">`string.padStart`</span>,<span class="string">`string.padEnd`</span></div><div class="line">eg:</div><div class="line"><span class="string">"aaa"</span>.padStart(<span class="number">5</span>,<span class="string">"x"</span>)</div><div class="line"><span class="string">"aaa"</span>.padEnd(<span class="number">5</span>,<span class="string">"x"</span>)</div></pre></td></tr></table></figure></p>
<p>2-6检测字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//checkType('165226226326','phone')</span></div><div class="line"><span class="comment">//false</span></div><div class="line"><span class="comment">//大家可以根据需要扩展</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkType</span> (<span class="params">str, type</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'email'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'phone'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'tel'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'english'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'chinese'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'lower'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.test(str);</div><div class="line">        <span class="keyword">case</span> <span class="string">'upper'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.test(str);</div><div class="line">        <span class="keyword">default</span> :</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">可以封装成自己的常量库进行封装</div><div class="line"><span class="keyword">var</span> REGS = &#123;</div><div class="line">  <span class="attr">EMAIL</span>:<span class="string">'/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/'</span>,</div><div class="line">  <span class="attr">PHONE</span>: <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span></div><div class="line">  ...others</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-7检测密码强度<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//checkPwd('12asdASAD')</span></div><div class="line"><span class="comment">//3(强度等级为3)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> nowLv = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (str.length &lt; <span class="number">6</span>) &#123;</div><div class="line">        <span class="keyword">return</span> nowLv</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.test(str)) &#123;</div><div class="line">        nowLv++</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/[a-z]/</span>.test(str)) &#123;</div><div class="line">        nowLv++</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/[A-Z]/</span>.test(str)) &#123;</div><div class="line">        nowLv++</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/[\.|-|_]/</span>.test(str)) &#123;</div><div class="line">        nowLv++</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">return</span> nowLv;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-8随机码（toString详解）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//count取值范围0-36</span></div><div class="line"></div><div class="line"><span class="comment">//randomNumber(10)</span></div><div class="line"><span class="comment">//"2584316588472575"</span></div><div class="line"></div><div class="line"><span class="comment">//randomNumber(14)</span></div><div class="line"><span class="comment">//"9b405070dd00122640c192caab84537"</span></div><div class="line"></div><div class="line"><span class="comment">//Math.random().toString(36).substring(2);</span></div><div class="line"><span class="comment">//"83vhdx10rmjkyb9"</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNumber</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(count).substring(<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2-9查找字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">可能标题会有点误导，下面我就简单说明一个需求，在字符串<span class="string">'sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967'</span>中找出<span class="string">'blog'</span>的出现次数。代码如下</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countStr</span> (<span class="params">str,strSplit</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(strSplit).length<span class="number">-1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> strTest=<span class="string">'sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967'</span></div><div class="line"><span class="comment">//countStr(strTest,'blog')</span></div><div class="line"><span class="comment">//6</span></div></pre></td></tr></table></figure></p>
<ol>
<li>数组操作<br>3-1数组去重<br>这个方法是在太多了，我之前写的文章(js数组操作–使用迭代方法替代for循环,js关键词变色，数组打乱，数组去重的实现和封装)也有提到，我今天这里就写一种之前没用过的方法。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeatArray</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3-2数组顺序打乱<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upsetArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3-3数组最大值最小值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这一块的封装，主要是针对数字类型的数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3-4数组求和，平均值<br>//这一块的封装，主要是针对数字类型的数组<br>//求和<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumArr</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> sumText=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=arr.length;i&lt;len;i++)&#123;</div><div class="line">        sumText+=arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sumText</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//平均值,小数点可能会有很多位，这里不做处理，处理了使用就不灵活了！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function covArr(arr)&#123;</div><div class="line">    var sumText=sumArr(arr);</div><div class="line">    var covText=sumText/length;</div><div class="line">    return covText</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3-5从数组中随机获取元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//randomOne([1,2,3,6,8,5,4,2,6])</span></div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="comment">//randomOne([1,2,3,6,8,5,4,2,6])</span></div><div class="line"><span class="comment">//8</span></div><div class="line"><span class="comment">//randomOne([1,2,3,6,8,5,4,2,6])</span></div><div class="line"><span class="comment">//8</span></div><div class="line"><span class="comment">//randomOne([1,2,3,6,8,5,4,2,6])</span></div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomOne</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3-6返回数组（字符串）一个元素出现的次数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//getEleCount('asd56+asdasdwqe','a')</span></div><div class="line"><span class="comment">//3</span></div><div class="line"><span class="comment">//getEleCount([1,2,3,4,5,66,77,22,55,22],22)</span></div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEleCount</span> (<span class="params">obj, ele</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (ele == obj[i]) &#123;</div><div class="line">            num++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3-7返回数组（字符串）出现最多的几次元素和出现次数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//arr, rank-&gt;长度，默认为数组长度，ranktype，排序方式，默认降序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">arr, rank，ranktype</span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;, k, arr1 = []</div><div class="line">    <span class="comment">//记录每一元素出现的次数</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">        k = arr[i];</div><div class="line">        <span class="keyword">if</span> (obj[k]) &#123;</div><div class="line">            obj[k]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            obj[k] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//保存结果&#123;el-'元素'，count-出现次数&#125;</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> o <span class="keyword">in</span> obj) &#123;</div><div class="line">        arr1.push(&#123;<span class="attr">el</span>: o, <span class="attr">count</span>: obj[o]&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//排序（降序）</span></div><div class="line">    arr1.sort(<span class="function"><span class="keyword">function</span> (<span class="params">n1, n2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> n2.count - n1.count</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//如果ranktype为1，则为升序，反转数组</span></div><div class="line">    <span class="keyword">if</span>(ranktype===<span class="number">1</span>)&#123;</div><div class="line">        arr1=arr1.reverse();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> rank1 = rank || arr1.length;</div><div class="line">    <span class="keyword">return</span> arr1.slice(<span class="number">0</span>,rank1);</div><div class="line">&#125;</div><div class="line">getCount([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</div><div class="line">默认情况，返回所有元素出现的次数</div><div class="line"></div><div class="line"></div><div class="line">getCount([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],<span class="number">3</span>)</div><div class="line">传参（rank=<span class="number">3</span>），只返回出现次数排序前三的</div><div class="line"></div><div class="line"></div><div class="line">getCount([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],<span class="literal">null</span>,<span class="number">1</span>)</div><div class="line">传参（ranktype=<span class="number">1</span>,rank=<span class="literal">null</span>），升序返回所有元素出现次数</div><div class="line"></div><div class="line"></div><div class="line">getCount([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],<span class="number">3</span>,<span class="number">1</span>)</div><div class="line">传参（rank=<span class="number">3</span>，ranktype=<span class="number">1</span>），只返回出现次数排序（升序）前三的</div></pre></td></tr></table></figure></p>
<p>3-8得到n1-n2下标的数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//getArrayNum([0,1,2,3,4,5,6,7,8,9],5,9)</span></div><div class="line"><span class="comment">//[5, 6, 7, 8, 9]</span></div><div class="line"></div><div class="line"><span class="comment">//getArrayNum([0,1,2,3,4,5,6,7,8,9],2) 不传第二个参数,默认返回从n1到数组结束的元素</span></div><div class="line"><span class="comment">//[2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArrayNum</span>(<span class="params">arr,n1,n2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr1=[],len=n2||arr.length<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=n1;i&lt;=len;i++)&#123;</div><div class="line">        arr1.push(arr[i])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3-9筛选数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/删除值为<span class="string">'val'</span>的数组元素</div><div class="line"><span class="comment">//removeArrayForValue(['test','test1','test2','test','aaa'],'test','%')</span></div><div class="line"><span class="comment">//["aaa"]   带有'test'的都删除</span></div><div class="line">    </div><div class="line"><span class="comment">//removeArrayForValue(['test','test1','test2','test','aaa'],'test')</span></div><div class="line"><span class="comment">//["test1", "test2", "aaa"]  //数组元素的值全等于'test'才被删除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeArrayForValue</span>(<span class="params">arr,val,type</span>)</span>&#123;</div><div class="line">    arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> type===<span class="string">'%'</span>?item.indexOf(val)!==<span class="number">-1</span>:item!==val&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.基础DOM操作<br>这个部分代码其实参考jquery的一些函数写法，唯一区别就是调用不用，参数一样.比如下面的栗子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//设置对象内容</div><div class="line">jquery：$(&apos;#xxx&apos;).html(&apos;hello world&apos;);</div><div class="line">现在：html(document.getElementById(&apos;xxx&apos;),&apos;hello world&apos;)</div><div class="line">//获取对象内容</div><div class="line">jquery：$(&apos;#xxx&apos;).html();</div><div class="line">现在：html(document.getElementById(&apos;xxx&apos;))</div></pre></td></tr></table></figure></p>
<p>4-1检测对象是否有哪个类名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj,classStr</span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> arr=obj.className.split(<span class="regexp">/\s+/</span>); <span class="comment">//这个正则表达式是因为class可以有多个,判断是否包含 </span></div><div class="line">    <span class="keyword">return</span> (arr.indexOf(classStr)==<span class="number">-1</span>)?<span class="literal">false</span>:<span class="literal">true</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>4-2添加类名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj,classStr</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(obj,classStr))&#123;obj.className += <span class="string">" "</span> + classStr&#125;;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>4-3删除类名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj,classStr</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasClass(obj,classStr)) &#123;</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + classStr + <span class="string">'(\\s|$)'</span>);</div><div class="line">        obj.className = obj.className.replace(reg, <span class="string">''</span>);</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>4-4替换类名(“被替换的类名”,”替换的类名”)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceClass</span>(<span class="params">obj,newName,oldName</span>) </span>&#123;</div><div class="line">    removeClass(obj,oldName);</div><div class="line">    addClass(obj,newName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4-5获取兄弟节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">siblings</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a=[];<span class="comment">//定义一个数组，用来存o的兄弟元素 </span></div><div class="line">    <span class="keyword">var</span> p=obj.previousSibling; </div><div class="line">    <span class="keyword">while</span>(p)&#123;<span class="comment">//先取o的哥哥们 判断有没有上一个哥哥元素，如果有则往下执行 p表示previousSibling </span></div><div class="line">        <span class="keyword">if</span>(p.nodeType===<span class="number">1</span>)&#123; </div><div class="line">        a.push(p); </div><div class="line">        &#125; </div><div class="line">        p=p.previousSibling<span class="comment">//最后把上一个节点赋给p </span></div><div class="line">    &#125; </div><div class="line">    a.reverse()<span class="comment">//把顺序反转一下 这样元素的顺序就是按先后的了 </span></div><div class="line">    <span class="keyword">var</span> n=obj.nextSibling;<span class="comment">//再取o的弟弟 </span></div><div class="line">    <span class="keyword">while</span>(n)&#123;<span class="comment">//判断有没有下一个弟弟结点 n是nextSibling的意思 </span></div><div class="line">        <span class="keyword">if</span>(n.nodeType===<span class="number">1</span>)&#123; </div><div class="line">            a.push(n); </div><div class="line">        &#125; </div><div class="line">        n=n.nextSibling; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>4-6设置样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">obj,json</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">        obj.style[attr]=json[attr];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4-7设置文本内容<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">html</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.innerHTML;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.innerHTML=<span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4-8显示隐藏<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    obj.style.display=<span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    obj.style.display=<span class="string">"none"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5.其他操作<br>5-1cookie<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cookie</span></div><div class="line"><span class="comment">//设置cookie</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name,value,iDay</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oDate=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    oDate.setDate(oDate.getDate()+iDay);</div><div class="line">    <span class="built_in">document</span>.cookie=name+<span class="string">'='</span>+value+<span class="string">';expires='</span>+oDate;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取cookie</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr=<span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> arr2=arr[i].split(<span class="string">'='</span>);</div><div class="line">        <span class="keyword">if</span>(arr2[<span class="number">0</span>]==name)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> arr2[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">`js</span></div><div class="line">//删除cookie</div><div class="line">function removeCookie(name)&#123;</div><div class="line">    setCookie(name,1,-1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5-2清除对象中值为空的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//filterParams(&#123;a:"",b:null,c:"010",d:123&#125;)</span></div><div class="line"><span class="comment">//Object &#123;c: "010", d: 123&#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterParams</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> _newPar = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> ((obj[key] === <span class="number">0</span> || obj[key]) &amp;&amp; obj[key].toString().replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">''</span>) !== <span class="string">''</span>) &#123;</div><div class="line">            _newPar[key] = obj[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _newPar;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5-3现金额大写转换函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//upDigit(168752632)</span></div><div class="line"><span class="comment">//"人民币壹亿陆仟捌佰柒拾伍万贰仟陆佰叁拾贰元整"</span></div><div class="line"><span class="comment">//upDigit(1682)</span></div><div class="line"><span class="comment">//"人民币壹仟陆佰捌拾贰元整"</span></div><div class="line"><span class="comment">//upDigit(-1693)</span></div><div class="line"><span class="comment">//"欠人民币壹仟陆佰玖拾叁元整"</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upDigit</span>(<span class="params">n</span>)   </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">var</span> fraction = [<span class="string">'角'</span>, <span class="string">'分'</span>,<span class="string">'厘'</span>];  </div><div class="line">    <span class="keyword">var</span> digit = [<span class="string">'零'</span>, <span class="string">'壹'</span>, <span class="string">'贰'</span>, <span class="string">'叁'</span>, <span class="string">'肆'</span>, <span class="string">'伍'</span>, <span class="string">'陆'</span>, <span class="string">'柒'</span>, <span class="string">'捌'</span>, <span class="string">'玖'</span>];  </div><div class="line">    <span class="keyword">var</span> unit = [ [<span class="string">'元'</span>, <span class="string">'万'</span>, <span class="string">'亿'</span>], [<span class="string">''</span>, <span class="string">'拾'</span>, <span class="string">'佰'</span>, <span class="string">'仟'</span>]  ];  </div><div class="line">    <span class="keyword">var</span> head = n &lt; <span class="number">0</span>? <span class="string">'欠人民币'</span>: <span class="string">'人民币'</span>;  </div><div class="line">    n = <span class="built_in">Math</span>.abs(n);  </div><div class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fraction.length; i++)   </div><div class="line">    &#123;</div><div class="line">        s += (digit[<span class="built_in">Math</span>.floor(n * <span class="number">10</span> * <span class="built_in">Math</span>.pow(<span class="number">10</span>, i)) % <span class="number">10</span>] + fraction[i]).replace(<span class="regexp">/零./</span>, <span class="string">''</span>); </div><div class="line">    &#125; </div><div class="line">    s = s || <span class="string">'整'</span>;  </div><div class="line">    n = <span class="built_in">Math</span>.floor(n);  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].length &amp;&amp; n &gt; <span class="number">0</span>; i++)   </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">var</span> p = <span class="string">''</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].length &amp;&amp; n &gt; <span class="number">0</span>; j++)   </div><div class="line">        &#123;  </div><div class="line">            p = digit[n % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p; </div><div class="line">            n = <span class="built_in">Math</span>.floor(n / <span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//s = p.replace(/(零.)*零$/, '').replace(/^$/, '零')+ unit[0][i] + s; </span></div><div class="line">        s = p+ unit[<span class="number">0</span>][i] + s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> head + s.replace(<span class="regexp">/(零.)*零元/</span>, <span class="string">'元'</span>).replace(<span class="regexp">/(零.)+/g</span>, <span class="string">'零'</span>).replace(<span class="regexp">/^整$/</span>, <span class="string">'零元整'</span>);</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line">5-4获取，设置url参数</div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="comment">//获取url参数</span></div><div class="line"><span class="comment">//getUrlPrmt('segmentfault.com/write?draftId=122000011938')</span></div><div class="line"><span class="comment">//Object&#123;draftId: "122000011938"&#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlPrmt</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    url = url ? url : <span class="built_in">window</span>.location.href;</div><div class="line">    <span class="keyword">let</span> _pa = url.substring(url.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>), _arrS = _pa.split(<span class="string">'&amp;'</span>), _rs = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, _len = _arrS.length; i &lt; _len; i++) &#123;</div><div class="line">        <span class="keyword">let</span> pos = _arrS[i].indexOf(<span class="string">'='</span>);</div><div class="line">        <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> name = _arrS[i].substring(<span class="number">0</span>, pos), value = <span class="built_in">window</span>.decodeURIComponent(_arrS[i].substring(pos + <span class="number">1</span>));</div><div class="line">        _rs[name] = value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _rs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置url参数</span></div><div class="line"><span class="comment">//setUrlPrmt(&#123;'a':1,'b':2&#125;)</span></div><div class="line"><span class="comment">//a=1&amp;b=2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setUrlPrmt</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> _rs = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (obj[p] != <span class="literal">null</span> &amp;&amp; obj[p] != <span class="string">''</span>) &#123;</div><div class="line">            _rs.push(p + <span class="string">'='</span> + obj[p])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _rs.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5-5随机返回一个范围的数字<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNumber</span>(<span class="params">n1,n2</span>)</span>&#123;</div><div class="line">    <span class="comment">//randomNumber(5,10)</span></div><div class="line">    <span class="comment">//返回5-10的随机整数，包括5，10</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.round(n1+<span class="built_in">Math</span>.random()*(n2-n1));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//randomNumber(10)</span></div><div class="line">    <span class="comment">//返回0-10的随机整数，包括0，10</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length===<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*n1)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//randomNumber()</span></div><div class="line">    <span class="comment">//返回0-255的随机整数，包括0，255</span></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">255</span>)</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5-6随进产生颜色<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//randomNumber是上面定义的函数</span></div><div class="line">    <span class="comment">//写法1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'rgb('</span> + randomNumber(<span class="number">255</span>) + <span class="string">','</span> + randomNumber(<span class="number">255</span>) + <span class="string">','</span> + randomNumber(<span class="number">255</span>) + <span class="string">')'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//写法2</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'#'</span>+<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>).substr(<span class="number">0</span>,<span class="number">6</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//写法3</span></div><div class="line">    <span class="keyword">var</span> color=<span class="string">'#'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</div><div class="line">        color+=<span class="string">'0123456789abcdef'</span>[randomNumber(<span class="number">15</span>)];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div><div class="line"><span class="comment">//这种写法，偶尔会有问题。大家得注意哦</span></div><div class="line"><span class="comment">//Math.floor(Math.random()*0xffffff).toString(16);</span></div></pre></td></tr></table></figure></p>
<p>5-7Date日期时间部分<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//到某一个时间的倒计时</span></div><div class="line"><span class="comment">//getEndTime('2017/7/22 16:0:0')</span></div><div class="line"><span class="comment">//"剩余时间6天 2小时 28 分钟20 秒"</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEndTime</span>(<span class="params">endTime</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> startDate=<span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">//开始时间，当前时间</span></div><div class="line">    <span class="keyword">var</span> endDate=<span class="keyword">new</span> <span class="built_in">Date</span>(endTime); <span class="comment">//结束时间，需传入时间参数</span></div><div class="line">    <span class="keyword">var</span> t=endDate.getTime()-startDate.getTime();  <span class="comment">//时间差的毫秒数</span></div><div class="line">    <span class="keyword">var</span> d=<span class="number">0</span>,h=<span class="number">0</span>,m=<span class="number">0</span>,s=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(t&gt;=<span class="number">0</span>)&#123;</div><div class="line">      d=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">3600</span>/<span class="number">24</span>);</div><div class="line">      h=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>%<span class="number">24</span>);</div><div class="line">      m=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">60</span>%<span class="number">60</span>);</div><div class="line">      s=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>%<span class="number">60</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="string">"剩余时间"</span>+d+<span class="string">"天 "</span>+h+<span class="string">"小时 "</span>+m+<span class="string">" 分钟"</span>+s+<span class="string">" 秒"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5-8适配rem<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">这个适配的方法很多，我就写我自己用的方法。大家也可以去我回答过得一个问题那里看更详细的说明！移动端适配问题</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFontSize</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> doc=<span class="built_in">document</span>,win=<span class="built_in">window</span>;</div><div class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</div><div class="line">    resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">    recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;</div><div class="line">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//如果屏幕大于750（750是根据我效果图设置的，具体数值参考效果图），就设置clientWidth=750，防止font-size会超过100px</span></div><div class="line">        <span class="keyword">if</span>(clientWidth&gt;<span class="number">750</span>)&#123;clientWidth=<span class="number">750</span>&#125;</div><div class="line">        <span class="comment">//设置根元素font-size大小</span></div><div class="line">        docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">750</span>) + <span class="string">'px'</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//屏幕大小改变，或者横竖屏切换时，触发函数</span></div><div class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</div><div class="line">    <span class="comment">//文档加载完成时，触发函数</span></div><div class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用方式很简单，比如效果图上，有张图片。宽高都是100px;</span></div><div class="line"><span class="comment">//样式写法就是</span></div><div class="line">img&#123;</div><div class="line">    <span class="attr">width</span>:<span class="number">1</span>rem;</div><div class="line">    height:<span class="number">1</span>rem;</div><div class="line">&#125;</div><div class="line"><span class="comment">//这样的设置，比如在屏幕宽度大于等于750px设备上，1rem=100px；图片显示就是宽高都是100px</span></div><div class="line"><span class="comment">//比如在iphone6(屏幕宽度：375)上，375/750*100=50px;就是1rem=50px;图片显示就是宽高都是50px;</span></div></pre></td></tr></table></figure></p>
<p>6.封装成形<br>写了这么多的操作，小伙伴应该发现了一问题，全局函数太多了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这样的话，封装了几个操作，就增加了几个全局函数，污染了全局变量，在开发中应该尽量避免全局变量。不说别的，如果一个项目，几个人开发，很有可能会造成命名的冲突。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setUrlPrmt</span>(<span class="params">obj</span>)</span>&#123;..&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlPrmt</span>(<span class="params">url</span>)</span>&#123;..&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upsetArr</span>(<span class="params">obj</span>)</span>&#123;..&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//所以，建议的封装姿势是</span></div><div class="line"><span class="keyword">var</span> myJS=&#123;</div><div class="line">    <span class="attr">setUrlPrmt</span>:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="attr">getUrlPrmt</span>:<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="attr">upsetArr</span>:<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;..&#125;,</div><div class="line">&#125;</div><div class="line">这样就算别人也写这样的函数,也不会造成冲突。全局变量也只有一个，加上别人也不会很多！</div><div class="line"><span class="keyword">var</span> otherJS=&#123;</div><div class="line">    <span class="attr">setUrlPrmt</span>:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="attr">getUrlPrmt</span>:<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="attr">upsetArr</span>:<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;..&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//最后，封装的效果是</span></div><div class="line"><span class="keyword">var</span> myJS=&#123;</div><div class="line">    <span class="comment">//去除字符串空格</span></div><div class="line">    trim:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="comment">//字母大小写切换</span></div><div class="line">    changeCase:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="comment">//字符串循环复制</span></div><div class="line">    repeatStr:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;..&#125;,</div><div class="line">    .....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果是es6的模块化开发，大家也可以</span></div><div class="line"><span class="keyword">let</span> myJS=&#123;</div><div class="line">    <span class="comment">//去除字符串空格</span></div><div class="line">    trim:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="comment">//字母大小写切换</span></div><div class="line">    changeCase:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;..&#125;,</div><div class="line">    <span class="comment">//字符串循环复制</span></div><div class="line">    repeatStr:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;..&#125;,</div><div class="line">    .....</div><div class="line">&#125;</div><div class="line"><span class="comment">//暴露模块，里面的方式大家也可以用es6方式实现，代码至少会少一点！</span></div><div class="line"><span class="keyword">export</span> &#123;myJS&#125;</div><div class="line">可能有小伙伴会有疑问，这样封装，调用有点麻烦，为什么不直接在原型上面封装，调用方便。比如下面的栗子！</div><div class="line"><span class="built_in">String</span>.prototype.trim=<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(^\s*)/g</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(\s*$)/g</span>, <span class="string">""</span>);</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="js数组去重"><a href="#js数组去重" class="headerlink" title="js数组去重"></a>js数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line">  <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!result.includes(v))&#123;</div><div class="line">      result.push(v);</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> json = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line">  <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> type = <span class="built_in">Object</span>.prototype.toString.call(value).match(<span class="regexp">/\s(\w+)/</span>)[<span class="number">1</span>].toLowerCase();</div><div class="line">    <span class="keyword">if</span>(!((type + <span class="string">'-'</span>+value) <span class="keyword">in</span> json))&#123;</div><div class="line">      json[type + <span class="string">'-'</span>+value] = <span class="literal">true</span>;</div><div class="line">      result.push(value);</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sortArr = <span class="keyword">this</span>.sort(),</div><div class="line">    i = <span class="number">0</span>,</div><div class="line">    len = sortArr.length;</div><div class="line">  <span class="keyword">for</span>(; i &lt; len; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(sortArr[i] === sortArr[i++])&#123;</div><div class="line">      sortArr.splice(i,<span class="number">1</span>);</div><div class="line">      i--;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sortArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//filter是es5中新增的数组的一个方法。不了解的同请阅读Array.prototype.filter()</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sortArr = <span class="keyword">this</span>.sort();</div><div class="line">  <span class="keyword">return</span> sortArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,context</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> v !== context[i+<span class="number">1</span>];</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> sortArr = <span class="keyword">this</span>.sort(), result = [];</div><div class="line">  sortArr.reduce(<span class="function">(<span class="params">v1,v2</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span>(v1 !== v2)&#123;</div><div class="line">      result.push(v1);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> v2;</div><div class="line">  &#125;)</div><div class="line">  result.push(sortArr[sortArr.length - <span class="number">1</span>]);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成任意长度的随机字符"><a href="#生成任意长度的随机字符" class="headerlink" title="生成任意长度的随机字符"></a>生成任意长度的随机字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomStr</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> text = <span class="string">""</span>;</div><div class="line">            <span class="keyword">var</span> possible = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</div><div class="line">            <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i &lt; len; i++ )</div><div class="line">                text += possible.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * possible.length));</div><div class="line">            <span class="keyword">return</span> text;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span>  aaa = getRandomStr(<span class="number">10000</span>);</div><div class="line"><span class="built_in">console</span>.log(aaa);</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line">&gt; ps 可以采用es6 string.repeat() 模拟 也可以使用mockjs来模拟 express充当服务器也可以用来模拟</div><div class="line"></div><div class="line">### 浏览器UA </div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> browser = &#123;</div><div class="line">    <span class="attr">versions</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> u = navigator.userAgent,</div><div class="line">            app = navigator.appVersion;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="comment">//移动终端浏览器版本信息             </span></div><div class="line">            trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>, <span class="comment">//IE内核             </span></div><div class="line">            presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, <span class="comment">//opera内核             </span></div><div class="line">            webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, <span class="comment">//苹果、谷歌内核             </span></div><div class="line">            gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>, <span class="comment">//火狐内核             </span></div><div class="line">            mobile: !!u.match(<span class="regexp">/AppleWebKit.*Mobile.*/</span>), <span class="comment">//是否为移动终端             </span></div><div class="line">            ios: !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端             </span></div><div class="line">            android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端或uc浏览器             </span></div><div class="line">            iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器             </span></div><div class="line">            iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad             </span></div><div class="line">            webApp: u.indexOf(<span class="string">'Safari'</span>) == <span class="number">-1</span> <span class="comment">//是否web应该程序，没有头部与底部         </span></div><div class="line">        &#125;;</div><div class="line">    &#125;(),</div><div class="line">    <span class="attr">language</span>: (navigator.browserLanguage || navigator.language).toLowerCase()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="trim-ES6有"><a href="#trim-ES6有" class="headerlink" title="trim ES6有"></a>trim ES6有</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String.prototype.trim = function() &#123;</div><div class="line">    return this.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function myTrim(s) &#123;</div><div class="line">    return s.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="util-非空"><a href="#util-非空" class="headerlink" title="util 非空"></a>util 非空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Util</span></div><div class="line"><span class="keyword">var</span> Utils = Utils || &#123;&#125;;</div><div class="line">Utils.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="string">""</span> + val;</div><div class="line">    <span class="keyword">return</span> $.isEmptyObject(value) || value.trim().length === <span class="number">0</span> || $.trim(value).length === <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mcts蒙特卡洛搜索-蒙特卡洛搜索树-人工智能"><a href="#mcts蒙特卡洛搜索-蒙特卡洛搜索树-人工智能" class="headerlink" title="mcts蒙特卡洛搜索 蒙特卡洛搜索树 人工智能"></a>mcts蒙特卡洛搜索 蒙特卡洛搜索树 人工智能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> nActions = <span class="number">5</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> epsilon = <span class="number">1e-6</span>;</div><div class="line">    TreeNode[] children;</div><div class="line">    <span class="keyword">double</span> nVisits, totValue;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAction</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;TreeNode&gt; visited = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        TreeNode cur = <span class="keyword">this</span>;</div><div class="line">        visited.add(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">while</span> (!cur.isLeaf()) &#123;</div><div class="line">            cur = cur.select();</div><div class="line">            visited.add(cur);</div><div class="line">        &#125;</div><div class="line">        cur.expand();</div><div class="line">        TreeNode newNode = cur.select();</div><div class="line">        visited.add(newNode);</div><div class="line">        <span class="keyword">double</span> value = rollOut(newNode);</div><div class="line">        <span class="keyword">for</span> (TreeNode node : visited) &#123;</div><div class="line">            <span class="comment">// would need extra logic for n-player game</span></div><div class="line">            node.updateStats(value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expand</span><span class="params">()</span> </span>&#123;</div><div class="line">        children = <span class="keyword">new</span> TreeNode[nActions];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nActions; i++) &#123;</div><div class="line">            children[i] = <span class="keyword">new</span> TreeNode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">select</span><span class="params">()</span> </span>&#123;</div><div class="line">        TreeNode selected = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">double</span> bestValue = Double.MIN_VALUE;</div><div class="line">        <span class="keyword">for</span> (TreeNode c : children) &#123;</div><div class="line">            <span class="keyword">double</span> uctValue = c.totValue / (c.nVisits + epsilon) +</div><div class="line">                       Math.sqrt(Math.log(nVisits+<span class="number">1</span>) / (c.nVisits + epsilon)) +</div><div class="line">                           r.nextDouble() * epsilon;</div><div class="line">            <span class="comment">// small random number to break ties randomly in unexpanded nodes</span></div><div class="line">            <span class="keyword">if</span> (uctValue &gt; bestValue) &#123;</div><div class="line">                selected = c;</div><div class="line">                bestValue = uctValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> selected;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> children == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">rollOut</span><span class="params">(TreeNode tn)</span> </span>&#123;</div><div class="line">        <span class="comment">// ultimately a roll out will end in some value</span></div><div class="line">        <span class="comment">// assume for now that it ends in a win or a loss</span></div><div class="line">        <span class="comment">// and just return this at random</span></div><div class="line">        <span class="keyword">return</span> r.nextInt(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStats</span><span class="params">(<span class="keyword">double</span> value)</span> </span>&#123;</div><div class="line">        nVisits++;</div><div class="line">        totValue += value;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> children == <span class="keyword">null</span> ? <span class="number">0</span> : children.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jquery ajax函数封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url, type success, error</span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: url,</div><div class="line">        <span class="attr">type</span>: type,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="attr">timeout</span>: <span class="number">10000</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> data = d.data;</div><div class="line">            success &amp;&amp; success(data);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            error &amp;&amp; error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 使用方法：</span></div><div class="line">Ajax(<span class="string">'/data.json'</span>, <span class="string">'get'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>jsonp 跨域的封装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> options = config || &#123;&#125;;   <span class="comment">// 需要配置url, success, time, fail四个属性</span></div><div class="line">    <span class="keyword">var</span> callbackName = (<span class="string">'jsonp_'</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">"."</span>, <span class="string">""</span>);</div><div class="line">    <span class="keyword">var</span> oHead = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    oHead.appendChild(oScript);</div><div class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;  <span class="comment">//创建jsonp回调函数</span></div><div class="line">        oHead.removeChild(oScript);</div><div class="line">        clearTimeout(oScript.timer);</div><div class="line">        <span class="built_in">window</span>[callbackName] = <span class="literal">null</span>;</div><div class="line">        options.success &amp;&amp; options.success(json);   <span class="comment">//先删除script标签，实际上执行的是success函数</span></div><div class="line">    &#125;;</div><div class="line">    oScript.src = options.url + <span class="string">'?'</span> + callbackName;    <span class="comment">//发送请求</span></div><div class="line">    <span class="keyword">if</span> (options.time) &#123;  <span class="comment">//设置超时处理</span></div><div class="line">        oScript.timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">window</span>[callbackName] = <span class="literal">null</span>;</div><div class="line">            oHead.removeChild(oScript);</div><div class="line">            options.fail &amp;&amp; options.fail(&#123; <span class="attr">message</span>: <span class="string">"超时"</span> &#125;);</div><div class="line">        &#125;, options.time);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 使用方法：</span></div><div class="line">jsonp(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/b.com/b.json'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="comment">//数据处理</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">time</span>: <span class="number">5000</span>,</div><div class="line">    <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//错误处理</span></div><div class="line">    &#125;       </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>常用正则表达式<br>手机号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> validate = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> exp = <span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>;</div><div class="line">    <span class="keyword">return</span> exp.test(num);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><a href="http://www1.w3cfuns.com/tools.php?mod=regex" target="_blank" rel="external">前端正则工具</a></p>
<h3 id="常用js函数"><a href="#常用js函数" class="headerlink" title="常用js函数"></a>常用js函数</h3><ul>
<li><p>返回顶部</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = $(<span class="built_in">window</span>).scrollTop();</div><div class="line">    <span class="keyword">if</span>(a &gt; <span class="number">100</span>) &#123;</div><div class="line">        $(<span class="string">'.go-top'</span>).fadeIn();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        $(<span class="string">'.go-top'</span>).fadeOut();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">$(<span class="string">".go-top"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"html,body"</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="string">"0px"</span>&#125;,<span class="string">'600'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>阻止冒泡</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e = e || <span class="built_in">window</span>.event;  </div><div class="line">    <span class="keyword">if</span>(e.stopPropagation)&#123;</div><div class="line">        e.stopPropagation();  <span class="comment">//W3C阻止冒泡方法  </span></div><div class="line">    &#125;<span class="keyword">else</span> &#123;  </div><div class="line">        e.cancelBubble = <span class="literal">true</span>; <span class="comment">//IE阻止冒泡方法  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>全部替换replace</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">bigStr, str1, str2</span>) </span>&#123;  <span class="comment">//把bigStr中的所有str1替换为str2</span></div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str1, <span class="string">'gm'</span>);</div><div class="line">    <span class="keyword">return</span> bigStr.replace(reg, str2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>获取浏览器url中参数的值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getURLParam = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>((<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[?|&amp;]'</span> + name + <span class="string">'='</span> + <span class="string">'([^&amp;;]+?)(&amp;|#|;|$)'</span>, <span class="string">"ig"</span>).exec(location.search) || [, <span class="string">""</span>])[<span class="number">1</span>].replace(<span class="regexp">/\+/g</span>, <span class="string">'%20'</span>)) || <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>数组去重</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [], json = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!json[arr[i]]) &#123;</div><div class="line">            json[arr[i]] = <span class="number">1</span>;</div><div class="line">            result.push(arr[i]);  <span class="comment">//返回没被删除的元素</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>操作cookie</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">myObj.setCookie = <span class="function"><span class="keyword">function</span>(<span class="params">cname, cvalue, exdays</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    d.setTime(d.getTime() + (exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</div><div class="line">    <span class="keyword">var</span> expires = <span class="string">'expires='</span>+d.toUTCString();</div><div class="line">    <span class="built_in">document</span>.cookie = cname + <span class="string">'='</span> + cvalue + <span class="string">'; '</span> + expires;</div><div class="line">&#125;;</div><div class="line">myObj.getCookie = <span class="function"><span class="keyword">function</span>(<span class="params">cname</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = cname + <span class="string">'='</span>;</div><div class="line">    <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; ca.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> c = ca[i];</div><div class="line">        <span class="keyword">while</span> (c.charAt(<span class="number">0</span>) == <span class="string">' '</span>) c = c.substring(<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (c.indexOf(name) != <span class="number">-1</span>) <span class="keyword">return</span> c.substring(name.length, c.length);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="HB-定义一些自定义空间-存放常用的方法和变量"><a href="#HB-定义一些自定义空间-存放常用的方法和变量" class="headerlink" title="HB  定义一些自定义空间  存放常用的方法和变量"></a>HB  定义一些自定义空间  存放常用的方法和变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义全局变量  通用库</span></div><div class="line"><span class="comment">//通用域名地址</span></div><div class="line"><span class="keyword">const</span> BASE_PATH = <span class="string">'//dev.m.12308.com'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> HB = &#123;</div><div class="line">  <span class="comment">// 是否是debug 模式</span></div><div class="line">  debug : <span class="literal">false</span>,</div><div class="line">  <span class="comment">//host base</span></div><div class="line">  HOST_BASE : BASE_PATH,</div><div class="line">  <span class="comment">// success code 响应成功 code</span></div><div class="line">  PER_PAGE_CNT : <span class="number">50</span>,</div><div class="line">  <span class="attr">LOADING_TEXT</span> : <span class="string">'加载中...'</span>,</div><div class="line">  <span class="attr">SC</span> : <span class="string">'0000'</span>,</div><div class="line">  <span class="comment">// 接口访问的基本路径</span></div><div class="line">  BASE : <span class="string">'//192.168.1.120:8100'</span>,</div><div class="line">  <span class="comment">// 域名和端口</span></div><div class="line">  BAIDU_MAP_AK : <span class="string">'gOxFzMG1XwXoH8OyY7mdAnMdf6EKsPSt'</span>,</div><div class="line">  <span class="comment">// 配置的URL 跳转地址</span></div><div class="line">  URL : &#123;</div><div class="line">    <span class="comment">// 活动中心地址</span></div><div class="line">    HOME_NOTICE_URL : BASE_PATH + <span class="string">"/user/busTicket/activity"</span>,</div><div class="line">    <span class="comment">// 订单列表 地址</span></div><div class="line">    HOME_ORDER_URL : BASE_PATH + <span class="string">'/user/busTicket/orderList'</span>,</div><div class="line">    <span class="comment">// 个人中心 地址</span></div><div class="line">    HOME_USER_URL : BASE_PATH + <span class="string">'/user/busTicket/personal'</span>,</div><div class="line">    <span class="comment">// 登录的项目地址</span></div><div class="line">    LOGIN_URL : BASE_PATH + <span class="string">"/user/login"</span>,</div><div class="line">    <span class="comment">// 跳转到登录页面并重定向当前页</span></div><div class="line">    LOGIN_URL_REDIRECT : BASE_PATH + <span class="string">"/user/login?redirectURL="</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">window</span>.location.href),</div><div class="line">    <span class="comment">//火车票的项目地址</span></div><div class="line">    HOME_TRAIN:<span class="string">"//dev.m.12308.com/train"</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">COMMON</span>:&#123;</div><div class="line">    <span class="attr">PAY_URL</span> : <span class="string">''</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//正则验证库</span></div><div class="line">  R:&#123;</div><div class="line">    <span class="attr">MOBILE</span>:<span class="regexp">/0?(13|14|15|18)[0-9]&#123;9&#125;/</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//方法库</span></div><div class="line">  M:&#123;</div><div class="line">    <span class="attr">getCookie</span>: <span class="function"><span class="keyword">function</span>(<span class="params">c_name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">var</span> c_start = <span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>);</div><div class="line">      <span class="keyword">if</span> (c_start != <span class="number">-1</span>) &#123;</div><div class="line">        c_start = c_start + c_name.length + <span class="number">1</span>;</div><div class="line">        <span class="keyword">var</span> c_end = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, c_start);</div><div class="line">        <span class="keyword">if</span> (c_end == <span class="number">-1</span>) &#123;</div><div class="line">          c_end = <span class="built_in">document</span>.cookie.length</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start, c_end))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span></div><div class="line">   &#125;,</div><div class="line">    <span class="attr">setCookie</span>: <span class="function"><span class="keyword">function</span>(<span class="params">c_name, value, expiredays</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">      exdate.setDate(exdate.getDate() + expiredays);</div><div class="line">      <span class="built_in">document</span>.cookie = c_name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + ((expiredays == <span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span> + exdate.toGMTString() + <span class="string">";path=/;"</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//</span></div><div class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params">str,val</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str);</div><div class="line">      <span class="keyword">return</span>  regex.test(val);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 加载百度地图</span></div><div class="line">    loadBaiduJScript:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"loadBaiduJScript"</span>);</div><div class="line">      <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">      script.type = <span class="string">"text/javascript"</span>;</div><div class="line">      script.async = <span class="string">"async"</span>;</div><div class="line">      script.src = <span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=vi1EKp70TLnDmSajXQ3NOxldE58nO828&amp;callback=init"</span>;</div><div class="line">      <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 获取 手机号</span></div><div class="line">    getCurrentUserPhone: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> userInfo = localStorage.getItem(<span class="string">"myInfor"</span>);</div><div class="line">      <span class="keyword">let</span> userPhone = <span class="string">''</span>;</div><div class="line">      <span class="keyword">if</span> (userInfo != <span class="literal">null</span> &amp;&amp; userInfo.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        userPhone = <span class="built_in">JSON</span>.parse(userInfo).userName;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> userPhone;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 获取 authToken</span></div><div class="line">    getCurrentAuthToken: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> auth = localStorage.getItem(<span class="string">"authToken"</span>);</div><div class="line">      <span class="keyword">let</span> result = <span class="string">''</span>;</div><div class="line">      <span class="keyword">if</span> (auth != <span class="literal">null</span> &amp;&amp; auth.length &gt; <span class="number">0</span> &amp;&amp; auth != <span class="string">'undefined'</span>) &#123;</div><div class="line">        result = auth;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// wx or h5</span></div><div class="line">    getChannel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLowerCase();</div><div class="line">      <span class="keyword">let</span> result = <span class="string">'h5'</span>;</div><div class="line">      <span class="keyword">if</span> (ua != <span class="literal">null</span> &amp;&amp; ua.indexOf(<span class="string">'micromessenger'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">        result = <span class="string">'wx'</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 是否是空 空对象 空串(包含trim后为空的串) 空数组  均返回TRUE 其他返回false </span></div><div class="line">    isEmpty : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj=== <span class="string">'string'</span> &amp;&amp; obj.trim().length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(<span class="string">'length'</span>) &amp;&amp; obj.length === <span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// Toast:Toast,</span></div><div class="line">  toast:HbToast</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.HB = HB;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue组件]]></title>
      <url>/blog/2017/07/17/vue%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>常常会使用到vue封装的各种组件 今天就推荐下</p>
<ul>
<li>NProgress 浏览器顶部加载进度条<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">//base</span></div><div class="line"> <span class="comment">// npm i nprogress -S</span></div><div class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// progress</span></div><div class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span>;<span class="comment">// Progress 进度条 样式</span></div><div class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/'</span></div><div class="line"></div><div class="line">Vue.use(ElementUI)</div><div class="line">Vue.use(router);</div><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">  NProgress.start(); </div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  NProgress.done(); <span class="comment">// 结束Progress</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="favicon-webpack中的配置"><a href="#favicon-webpack中的配置" class="headerlink" title="favicon webpack中的配置"></a>favicon webpack中的配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> resolve = <span class="built_in">require</span>(<span class="string">'path'</span>).resolve;</div><div class="line"></div><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">            <span class="attr">names</span>: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</div><div class="line">            <span class="attr">minChunks</span>: <span class="number">3</span>,</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            <span class="attr">template</span>: <span class="string">'src/index.html'</span>,</div><div class="line">            <span class="comment">// 关键代码</span></div><div class="line">            favicon: resolve(<span class="string">'./src/favicon.ico'</span>)</div><div class="line">        &#125;)</div><div class="line">    ],</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// vue源码</span></div><div class="line"><span class="keyword">var</span> isIOS = UA &amp;&amp; <span class="regexp">/iphone|ipad|ipod|ios/</span>.test(UA);</div><div class="line"><span class="keyword">var</span> isChrome = UA &amp;&amp; <span class="regexp">/chrome\/\d+/</span>.test(UA) &amp;&amp; !isEdge;</div></pre></td></tr></table></figure>
<h3 id="tree-shaking-尽量使用-import-as-XX-from-39-js-modules-39-来引入模块-配合webpack2-0-的tree-shaking-能实现代码有效体积减少"><a href="#tree-shaking-尽量使用-import-as-XX-from-39-js-modules-39-来引入模块-配合webpack2-0-的tree-shaking-能实现代码有效体积减少" class="headerlink" title="tree-shaking   尽量使用 import  * as  XX from &#39;js_modules&#39; 来引入模块 配合webpack2.0 的tree-shaking 能实现代码有效体积减少"></a>tree-shaking   尽量使用 <code>import  * as  XX from &#39;js_modules&#39;</code> 来引入模块 配合webpack2.0 的tree-shaking 能实现代码有效体积减少</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>）用<span class="keyword">import</span>/<span class="keyword">export</span>来改造代码，这是tree-shaking的基础，ES6的模块支持继承，可以正确执行tree-shaking。</div><div class="line"></div><div class="line"><span class="number">2</span>）webpack的打包非压缩的情况下会保留unused <span class="function"><span class="keyword">function</span>，压缩版才会真正去掉。</span></div><div class="line"></div><div class="line">3）尽量使用<span class="title">import</span> * <span class="title">as</span> <span class="title">uu</span> <span class="title">from</span> './<span class="title">invoke</span>.<span class="title">js</span>'隐式语法而无须使用<span class="title">import</span> &#123;ddd&#125; <span class="keyword">from</span> <span class="string">'./invoke.js'</span>这种显式语法。</div><div class="line"></div><div class="line"><span class="number">4</span>）我们的业务接入tree-shaking特性后，代码体积有减少<span class="number">30</span>%。</div><div class="line"></div><div class="line">作者：码匠之心</div><div class="line">链接：http:<span class="comment">//www.jianshu.com/p/7bd8d5e87965</span></div><div class="line">來源：简书</div><div class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div></pre></td></tr></table></figure>
<p>// .babelrc<br><a href="http://www.jianshu.com/p/7bd8d5e87965" target="_blank" rel="external">参考bable</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .babelrc的配置推荐使用babel-preset-env，这是目前最新的解决方案，会非常灵活的通过参数指定来兼容当前的环境。    </span></div><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    [<span class="string">"env"</span>, &#123;</div><div class="line">      <span class="string">"target"</span>: &#123;</div><div class="line">        <span class="string">"browsers"</span>: [<span class="string">"ios &gt; 7"</span>, <span class="string">"android &gt;= 4"</span>]</div><div class="line">      &#125;,</div><div class="line">      <span class="string">"modules"</span>: <span class="literal">false</span></div><div class="line">    &#125;]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域问题]]></title>
      <url>/blog/2017/06/30/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>跨域访问是前后端开发中常常遇到的问题 采用cors或部署的时候使用nginx反向代理都是可以解决跨域访问的问题的</p>
<h3 id="node-express-解决跨域"><a href="#node-express-解决跨域" class="headerlink" title="node+express 解决跨域"></a>node+express 解决跨域</h3><p>vue-resource代码(其实就是ajax技术)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$http.get(&#123;<span class="attr">url</span>:<span class="string">"http://localhost:3000/getdata"</span>&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data)</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;&#125;);</div><div class="line"><span class="string">``</span><span class="string">`    </span></div><div class="line">nodejs部分：    </div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="comment">//设置跨域访问 控制好响应头</span></div><div class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div><div class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</div><div class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</div><div class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</div><div class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</div><div class="line">    next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/getdata'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(&#123;<span class="attr">id</span>:req.params.id, <span class="attr">name</span>: req.params.password&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Listening on port 3000...'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="http-proxy-middleware-解决跨域问题-只能在开发环境中使用"><a href="#http-proxy-middleware-解决跨域问题-只能在开发环境中使用" class="headerlink" title="http-proxy-middleware 解决跨域问题 只能在开发环境中使用"></a>http-proxy-middleware 解决跨域问题 只能在开发环境中使用</h3><p>proxyTable: {<br>  ‘/list’: {<br>    target: ‘<a href="http://api.xxxxxxxx.com" target="_blank" rel="external">http://api.xxxxxxxx.com</a>‘,<br>    changeOrigin: true,<br>    pathRewrite: {<br>      ‘^/list’: ‘’<br>    }<br>  }<br>}<br>vue-cli的这个设置来自于其使用的插件http-proxy-middleware<br>github：<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="external">https://github.com/chimurai/http-proxy-middleware</a><br>深入了解的话可以看该插件配置说明，似乎还支持websocket，很强大的插件。</p>
<h3 id="webpack-dev-server-设置代理解决跨域问题-只能在开发环境中使用"><a href="#webpack-dev-server-设置代理解决跨域问题-只能在开发环境中使用" class="headerlink" title="webpack-dev-server 设置代理解决跨域问题 只能在开发环境中使用"></a>webpack-dev-server 设置代理解决跨域问题 只能在开发环境中使用</h3><p>详解见webpack的配置 (webpack-dev-server配置)[<a href="https://doc.webpack-china.org/configuration/dev-server/" target="_blank" rel="external">https://doc.webpack-china.org/configuration/dev-server/</a>]<br>webpack-dev-server 设置代理 <a href="http://www.jianshu.com/p/3bdff821f859" target="_blank" rel="external">http://www.jianshu.com/p/3bdff821f859</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack 中dev-server设置带来 解决跨域问题</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"> ...此处省略一万字</div><div class="line"></div><div class="line"> <span class="comment">// webpack-dev-server的配置</span></div><div class="line"> devServer: &#123;</div><div class="line"> <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</div><div class="line"> <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line"> <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line"> <span class="attr">progress</span>: <span class="literal">true</span>,</div><div class="line"> <span class="attr">port</span>: <span class="number">3000</span>,</div><div class="line"> <span class="attr">host</span>: <span class="string">'10.0.0.9'</span>,</div><div class="line"> <span class="attr">proxy</span>: &#123;</div><div class="line"> <span class="string">'/test/*'</span>: &#123;</div><div class="line">     <span class="attr">target</span>: <span class="string">'http://localhost'</span>,</div><div class="line">     <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</div><div class="line">     <span class="attr">secure</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="nginx-设置代理-解决跨域问题"><a href="#nginx-设置代理-解决跨域问题" class="headerlink" title="nginx 设置代理 解决跨域问题"></a>nginx 设置代理 解决跨域问题</h3><p>常用实例 采用nginx反向代理来解决跨域问题<br><figure class="highlight nginx"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> /api &#123;</div><div class="line">  <span class="attribute">rewrite</span> <span class="regexp"> ^.+apis/?(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</div><div class="line">  <span class="attribute">include</span>  uwsgi_params;</div><div class="line">  <span class="attribute">proxy_pass</span>   http://localhost:1894;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>eg 开发中常用 </p>
<p>配置<code>localhost</code><br>使用 localhost  127.0.0.1 本地IP都可以进行访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhsot;</div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">          ### 配置成本地webpack打包生成的路径</div><div class="line">          root    D:/infore/infore-web/dist/;</div><div class="line">          index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /api &#123;</div><div class="line">            ### 接口代理请求地址</div><div class="line">            proxy_pass http://192.168.31.52:8089/api;</div><div class="line">            proxy_redirect off;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">            # proxy_cookie_path /disconf /api;</div><div class="line">            # proxy_set_header   Cookie $http_cookie;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">###</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小知识点集汇二]]></title>
      <url>/blog/2017/06/17/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E6%B1%87%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="小知识点集汇二"><a href="#小知识点集汇二" class="headerlink" title="小知识点集汇二"></a>小知识点集汇二</h2><h3 id="短网址生成"><a href="#短网址生成" class="headerlink" title="短网址生成"></a>短网址生成</h3><p>微信等部分网址不支持中文路径的识别 可以采用短网址生成器来生成新的短网址坐map映射</p>
<blockquote>
<p><a href="http://dwz.cn/" target="_blank" rel="external">http://dwz.cn/</a> 百度短网址生成地址 还要对应api可以对接</p>
</blockquote>
<h3 id="地图慧-直接利用数据-结合地图-生成相对应的表格"><a href="#地图慧-直接利用数据-结合地图-生成相对应的表格" class="headerlink" title="地图慧  直接利用数据 结合地图 生成相对应的表格"></a>地图慧  直接利用数据 结合地图 生成相对应的表格</h3><p><a href="http://c.dituhui.com/" target="_blank" rel="external">http://c.dituhui.com/</a></p>
<h3 id="TWaver-HTML5-3D-商用软件-3D立体展示解决方案"><a href="#TWaver-HTML5-3D-商用软件-3D立体展示解决方案" class="headerlink" title="TWaver HTML5 3D 商用软件 3D立体展示解决方案"></a>TWaver HTML5 3D 商用软件 3D立体展示解决方案</h3><p><a href="http://www.servasoft.com" target="_blank" rel="external">http://www.servasoft.com</a></p>
<h3 id="YML-配置文件的书写"><a href="#YML-配置文件的书写" class="headerlink" title="YML 配置文件的书写"></a>YML 配置文件的书写</h3><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="external">阮一峰YAML教程</a></p>
<h3 id="for-in-遍历对象的属性"><a href="#for-in-遍历对象的属性" class="headerlink" title="for ... in 遍历对象的属性"></a><code>for ... in</code> 遍历对象的属性</h3><p><code>for ... of</code> 遍历数组<br><code>Array.forEach(value, index,orgDataArray)</code> 遍历</p>
<h3 id="cdn网站推荐-https-cdnjs-com"><a href="#cdn网站推荐-https-cdnjs-com" class="headerlink" title="cdn网站推荐 https://cdnjs.com/"></a>cdn网站推荐 <a href="https://cdnjs.com/" target="_blank" rel="external">https://cdnjs.com/</a></h3><p>当然，用别人的 CDN 都是不保险的，所以建议在 CDN 读取失败的时候从自己服务器提供：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"//http://lib.sinaapp.com/js/jquery/1.7.2/jquery.min.js"</span>&gt;&lt;/script&gt;&lt;script&gt;   </div><div class="line">if (!window.jQuery) &#123;    </div><div class="line">  var script = document.createElement('script');    </div><div class="line">  script.src = "/js/jquery.min.js";    document.body.appendChild(script);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">作者：顾轶灵</div><div class="line">链接：https:<span class="comment">//www.zhihu.com/question/20227463/answer/14403302</span></div><div class="line">来源：知乎</div><div class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div></pre></td></tr></table></figure>
<h3 id="关于路基-网页路径-最好是写成相对路径"><a href="#关于路基-网页路径-最好是写成相对路径" class="headerlink" title="关于路基 网页路径 最好是写成相对路径"></a>关于路基 网页路径 最好是写成相对路径</h3><p>资源加载 https 和 http  或其他默认协议<br><code>http://cdnjs.com/xxx.js</code> 错<br><code>//cdnjs.com/xxx.js</code>   对</p>
<p><code>/assets/img/xxx.jpg</code>  绝对路径 采用/ 标识根路径 不推荐<br><code>./assets/img/xxx/jpg</code>  推荐 <code>./</code>当前同级目录  <code>../</code>上级目录 <code>./xxx/</code> 多级目录</p>
<h3 id="js中-记住-2点关于函数和变量声明"><a href="#js中-记住-2点关于函数和变量声明" class="headerlink" title="js中 记住 2点关于函数和变量声明"></a>js中 记住 2点关于函数和变量声明</h3><ul>
<li>函数和变量声明提前 </li>
<li>函数声明优先于变量声明 </li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[视频直播流web播放]]></title>
      <url>/blog/2017/06/17/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E6%B5%81web%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<h1 id="视频直播放映解决方案"><a href="#视频直播放映解决方案" class="headerlink" title="视频直播放映解决方案"></a>视频直播放映解决方案</h1><h4 id="分为PC-web端和移动web端"><a href="#分为PC-web端和移动web端" class="headerlink" title="分为PC-web端和移动web端"></a>分为PC-web端和移动web端</h4><blockquote>
<p>pc-web端采用<a href="http://www.ckplayer.com/" target="_blank" rel="external">Ckplay播放器</a> 通过RTMP协议 传输视频流<br>mobile-web端采用h5 <code>video</code>标签 通过HLS 传输视频流</p>
</blockquote>
<h4 id="核心代码示例"><a href="#核心代码示例" class="headerlink" title="核心代码示例"></a>核心代码示例</h4><ul>
<li>pc-web端 ckplayer</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--pc-web端 ckplayer--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"ckplayer/ckplayer.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> flashvars=&#123;</div><div class="line">    <span class="comment">//配置视频地址</span></div><div class="line">		f:<span class="string">'rtmp://192.168.31.31:1935/live/stream'</span>,</div><div class="line">		<span class="attr">c</span>:<span class="number">0</span>,</div><div class="line">		<span class="attr">b</span>:<span class="number">1</span>,</div><div class="line">    <span class="comment">//配置封面</span></div><div class="line">		i:<span class="string">'http://www.ckplayer.com/static/images/cqdw.jpg'</span></div><div class="line">		&#125;;</div><div class="line">    <span class="comment">// 具体配置 参考和查看 [http://www.ckplayer.com/tool/flashvars.htm](http://www.ckplayer.com/tool/flashvars.htm)</span></div><div class="line">	<span class="keyword">var</span> params=&#123;<span class="attr">bgcolor</span>:<span class="string">'#FFF'</span>,<span class="attr">allowFullScreen</span>:<span class="literal">true</span>,<span class="attr">allowScriptAccess</span>:<span class="string">'always'</span>,<span class="attr">wmode</span>:<span class="string">'transparent'</span>&#125;;</div><div class="line">	CKobject.embedSWF(<span class="string">'ckplayer/ckplayer.swf'</span>,<span class="string">'a1'</span>,<span class="string">'ckplayer_a1'</span>,<span class="string">'600'</span>,<span class="string">'400'</span>,flashvars,params);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>mobile-web 端[HTML5 player]<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">webkit-playsinline</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://192.168.31.31:9090/live/stream.m3u8"</span> <span class="attr">type</span>=<span class="string">"application/vnd.apple.mpegurl"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"warin"</span>&gt;</span>Your browser does not support HTML5 video<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github个人博客]]></title>
      <url>/blog/2017/06/15/github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>  今天把博客弄到github上,计划以后再github上面写文章 学习笔记 图片等 300M的空间 也应该够了</p>
]]></content>
      
        
        <tags>
            
            <tag> 我 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小知识]]></title>
      <url>/blog/2017/06/14/%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h4 id="vue-spa-滚动行为的保存-需要启用history模式-参看https-router-vuejs-org-zh-cn-advanced-scroll-behavior-html"><a href="#vue-spa-滚动行为的保存-需要启用history模式-参看https-router-vuejs-org-zh-cn-advanced-scroll-behavior-html" class="headerlink" title="vue spa 滚动行为的保存 需要启用history模式 参看https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html"></a>vue spa 滚动行为的保存 需要启用history模式 参看<a href="https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html" target="_blank" rel="external">https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html</a></h4><h4 id="flex布局-flex布局的兼容性-部分需要添加-webkit前缀"><a href="#flex布局-flex布局的兼容性-部分需要添加-webkit前缀" class="headerlink" title="flex布局 flex布局的兼容性 部分需要添加 -webkit前缀"></a>flex布局 flex布局的兼容性 部分需要添加 <code>-webkit</code>前缀</h4><blockquote>
<p>理清 主轴 侧轴(和主轴垂直的)  <code>justify-content</code> 设置主轴的分布 <code>align-items</code>设置侧轴的分布</p>
</blockquote>
<h4 id="JSON-对象最后一个属性列-结尾-别用"><a href="#JSON-对象最后一个属性列-结尾-别用" class="headerlink" title="JSON 对象最后一个属性列 结尾 别用,"></a>JSON 对象最后一个属性列 结尾 别用<code>,</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> json = &#123;</div><div class="line">    <span class="string">"name"</span>:<span class="string">'张三'</span>,</div><div class="line">    <span class="string">"age"</span> : <span class="number">24</span>    <span class="comment">// ', 这里别打逗号或分号 养成好的习惯</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line">最好启用 eslint来规范书写习惯</div></pre></td></tr></table></figure>
<h4 id="array-splice-slice"><a href="#array-splice-slice" class="headerlink" title="array splice slice"></a>array splice slice</h4><ul>
<li>slice 浅复制数组 slice(index, end);</li>
<li>splice 删除和添加数组元素 splice(index, count. [….add-item]);</li>
</ul>
<h4 id="国内公开API-可用来写demo-测试数据"><a href="#国内公开API-可用来写demo-测试数据" class="headerlink" title="国内公开API 可用来写demo 测试数据"></a>国内公开API 可用来写demo 测试数据</h4><p><a href="https://github.com/jokermonn/-Api/blob/master/DoubanMovie.md" target="_blank" rel="external">https://github.com/jokermonn/-Api/blob/master/DoubanMovie.md</a> </p>
]]></content>
      
        
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[美图]]></title>
      <url>/blog/2017/06/14/%E7%BE%8E%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h4 id="分享几张手机桌面"><a href="#分享几张手机桌面" class="headerlink" title="分享几张手机桌面"></a>分享几张手机桌面</h4><p><img src="./assets/img/001.jpg" alt="001.jpg"><br><img src="./assets/img/002.jpg" alt="002.jpg"><br><img src="./assets/img/003.jpg" alt="003.jpg"></p>
]]></content>
      
        
        <tags>
            
            <tag> 美图分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx学习笔记]]></title>
      <url>/blog/2017/06/14/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="nginx能做什么"><a href="#nginx能做什么" class="headerlink" title="nginx能做什么"></a>nginx能做什么</h4><blockquote>
<p><a href="http://www.raye.wang/2017/02/24/quan-mian-liao-jie-nginxdao-di-neng-zuo-shi-yao/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">全面了解Nginx主要应用场景</a></p>
<ul>
<li>反向代理</li>
<li>负载均衡 RR(默认) 权重 ip_hash  fair url_hash</li>
<li>http服务器</li>
<li>正向代理</li>
</ul>
</blockquote>
<h3 id="反向代理（ReverseProxy）就是通过代理服务器来-接受internet的连接请求-然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给请求客户端"><a href="#反向代理（ReverseProxy）就是通过代理服务器来-接受internet的连接请求-然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给请求客户端" class="headerlink" title="反向代理（ReverseProxy）就是通过代理服务器来 接受internet的连接请求 然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给请求客户端"></a>反向代理（ReverseProxy）就是通过代理服务器来 接受internet的连接请求 然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给请求客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name localhost;</div><div class="line">    client_max_body_size 10M;</div><div class="line">    </div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://localhost:8080;</div><div class="line">        proxy_set_header Host $host:$server_port;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">保存配置文件后重启 nginx 这样当我们访问localhost 相当于访问localhost:8080了</div></pre></td></tr></table></figure>
<p>常用实例 采用nginx反向代理来解决跨域问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location /api &#123;</div><div class="line">rewrite  ^.+apis/?(.*)$ /$1 break;</div><div class="line">include  uwsgi_params;</div><div class="line">   proxy_pass   http://localhost:1894;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<p>这样 更改请求地址为 <code>/api</code> 虚拟的路径和 访问的静态页面就处于同源了<br>可以使用这样的来处理跨域问题</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>默认按照请求顺序分配到不同的后端服务器 如果后端服务器down掉 能自己剔除<br>简单配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">upstream test&#123;</div><div class="line">  #  server localhost: 8081 weight=3; server localhost: 8081 weight=7; 权重</div><div class="line">  # ip_hast </div><div class="line">  # fair 按照响应时间来分配 分配时间短的优先分配 需要第三方拓展包</div><div class="line">    server localhost:8081;</div><div class="line">    server localhost:8080;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 81;</div><div class="line">    server_name localhost;</div><div class="line">    client_max_body_size 1024M;</div><div class="line">    </div><div class="line">    localtion / &#123;</div><div class="line">        proxy_pass http://test;</div><div class="line">        proxy_set_header Host $host:$server_port;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HTTP  服务器</p>
<p>eg1: 静态资源服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name localhost;</div><div class="line">    client_max_body_size 1024M;</div><div class="line">    </div><div class="line">    location / &#123;</div><div class="line">        root e:\wwwrooot;</div><div class="line">        index index.html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>动静分离<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">upstream test &#123;</div><div class="line">    server localhost:8080;</div><div class="line">    server localhost:8081;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name localhost;</div><div class="line">    </div><div class="line">    location / &#123;</div><div class="line">        root e:\wwwroot;</div><div class="line">        index index.html;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    # 所有静态请求都有nginx处理 存放目录为html</div><div class="line">    location ~ \.(gif|jpg|jpeg|png|bmp|css|js)$ &#123;</div><div class="line">        root e:\wwwroot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    # 动态请求 交由代理服务处理</div><div class="line">    location ~ \.(jsp|do|action)$ &#123;</div><div class="line">        proxy_pass http://test;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    error_page 500 502 503 504 /50x.html</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root e:\wwwroot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的话 我们可以把html 等静态资源放在文件目录下  动态的话可以 根据 localtion后面的正则 匹配到代理服务器上</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>nginx -s reload</p>
<h3 id="window-热重启"><a href="#window-热重启" class="headerlink" title="window  热重启"></a>window  热重启</h3><p>nginx.exe -s reload</p>
<h3 id="代码示例-12308-测试环境"><a href="#代码示例-12308-测试环境" class="headerlink" title="代码示例 12308 测试环境"></a>代码示例 12308 测试环境</h3><blockquote>
<p>nginx.conf  base  通过载入  <code>/nginx_vhos/</code> 目录下的所有文件<br> <code>include /usr/local/nginx/conf/nginx_vhost/*.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">[dubbo@hd-node2 conf]$ vi nginx.conf</div><div class="line"></div><div class="line">    keepalive_timeout   65;</div><div class="line">    server_tokens       off;</div><div class="line">    tcp_nopush          on;</div><div class="line"></div><div class="line">    gzip                on;</div><div class="line">    gzip_comp_level     5;</div><div class="line">    gzip_min_length     1k;</div><div class="line">    gzip_buffers        4 16k;</div><div class="line">    gzip_disable        &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line">    gzip_types          text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json;</div><div class="line">    gzip_http_version   1.0;</div><div class="line">    gzip_vary           on;</div><div class="line"></div><div class="line">    log_format main &apos;$remote_addr $http_x_forwarded_for [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$request_time&quot; $request_body &quot;$upstream_response_time&quot;&apos;;</div><div class="line">    access_log on;</div><div class="line">    server_names_hash_max_size    4096;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       /usr/local/nginx/conf/mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    output_buffers      1 128k;</div><div class="line">    log_not_found       off;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    server_tokens       off;</div><div class="line">    tcp_nopush          on;</div><div class="line"></div><div class="line">    gzip                on;</div><div class="line">    gzip_comp_level     5;</div><div class="line">    gzip_min_length     1k;</div><div class="line">    gzip_buffers        4 16k;</div><div class="line">    gzip_disable        &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line">    gzip_types          text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json;</div><div class="line">    gzip_http_version   1.0;</div><div class="line">    gzip_vary           on;</div><div class="line"></div><div class="line">    log_format main &apos;$remote_addr $http_x_forwarded_for [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$request_time&quot; $request_body &quot;$upstream_response_time&quot;&apos;;</div><div class="line">    access_log on;</div><div class="line">    server_names_hash_max_size    4096;</div><div class="line">    server_names_hash_bucket_size 128;</div><div class="line"></div><div class="line">    client_header_buffer_size     32k;</div><div class="line">    large_client_header_buffers   4 32k;</div><div class="line">    client_max_body_size          100m;</div><div class="line"></div><div class="line">    proxy_connect_timeout         5;</div><div class="line">    proxy_read_timeout            60;</div><div class="line">    proxy_send_timeout            5;</div><div class="line">    proxy_buffer_size             16k;</div><div class="line">    proxy_buffers                 4 64k;</div><div class="line">    proxy_busy_buffers_size       128k;</div><div class="line">    proxy_temp_file_write_size    128k;</div><div class="line">    proxy_hide_header             Vary;</div><div class="line">    proxy_set_header              Accept-Encoding ”;</div><div class="line">    proxy_set_header              Host    $host;</div><div class="line">    proxy_set_header              Referer $http_referer;</div><div class="line">    proxy_set_header              Cookie  $http_cookie;</div><div class="line">    proxy_set_header              X-Real-IP  $remote_addr;</div><div class="line">    proxy_set_header              X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">    include /usr/local/nginx/conf/nginx_vhost/*.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[yarn学习笔记]]></title>
      <url>/blog/2017/06/14/yarn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="关于yarn和npm"><a href="#关于yarn和npm" class="headerlink" title="关于yarn和npm "></a><a href="http://web.jobbole.com/88459/" target="_blank" rel="external">关于yarn和npm </a></h3><p>yarn是npm的升级版本 (新工具) yarn.lock</p>
<ul>
<li>yarn add (npm install  yarn install)</li>
<li>yarn global</li>
<li>yarn why </li>
</ul>
<p>yarn 更安全 速度更快 版本锁定 环境更统一</p>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sass学习笔记]]></title>
      <url>/blog/2017/06/14/sass%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="sass学习笔记-sass官网"><a href="#sass学习笔记-sass官网" class="headerlink" title="sass学习笔记 sass官网"></a>sass学习笔记 <a href="https://www.sass.hk/guide/" target="_blank" rel="external">sass官网</a></h3><ul>
<li>工具下载<a href="https://www.sass.hk/skill/koala-app.html" target="_blank" rel="external">下载地址</a> 工欲善其事必先利其器</li>
<li>sass 定义css变量  <code>$t = &quot;100px&quot;</code>;</li>
<li><p>sass 表示层级关系 <code>div.c1&gt;p&gt;a + h1</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.c1 &#123;</div><div class="line">    ...</div><div class="line">    p&#123;</div><div class="line">        a&#123;</div><div class="line">           ... </div><div class="line">           &amp;:hover&#123;</div><div class="line">               ....</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    h1&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>$</code>定义变量 <code>&amp;</code>伪类样式</p>
</li>
<li><code>@import(url)</code> 使用@import 直接导入对应文件 和css中@import 有所不同</li>
<li><strong>混合器</strong> <code>@mixin</code> <code>@include</code> 调用混合器 目的:实现大段样式的重用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// </div><div class="line">@mixin name-a&#123;</div><div class="line">    color:#212;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 别的文件中复用样式</div><div class="line">.t1&#123;</div><div class="line">    ....</div><div class="line">    @include name-a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>通过使用参数，你可以使用混合器把你样式中的通用样式抽离出来，然后轻松地在其他地方重用。</strong> 实际上，混合器太好用了，一不小心你可能会过度使用。大量的重用可能会导致生成的样式表过大，导致加载缓慢。所以，首先我们将讨论混合器的使用场景，避免滥用。</p>
<p>混合器还可以传入参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@mixin link-colors($normal, $hover, $visited) &#123;</div><div class="line">  color: $normal;</div><div class="line">  &amp;:hover &#123; color: $hover; &#125;</div><div class="line">  &amp;:visited &#123; color: $visited; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a &#123;</div><div class="line">  @include link-colors(blue, red, green);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Sass最终生成的是：</div><div class="line"></div><div class="line">a &#123; color: blue; &#125;</div><div class="line">a:hover &#123; color: red; &#125;</div><div class="line">a:visited &#123; color: green; &#125;</div></pre></td></tr></table></figure>
<p>为了在@include混合器时不必传入所有的参数，我们可以给参数指定一个默认值。参数默认值使用$name: default-value的声明形式，默认值可以是任何有效的css属性值，甚至是其他参数的引用，如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@mixin link-colors(</div><div class="line">    $normal,</div><div class="line">    $hover: $normal, // 默认参数 $hover 没有传递第二个参数 采用第一个参数$normal</div><div class="line">    $visited: $normal</div><div class="line">  )</div><div class="line">&#123;</div><div class="line">  color: $normal;</div><div class="line">  &amp;:hover &#123; color: $hover; &#125;</div><div class="line">  &amp;:visited &#123; color: $visited; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//如果像下边这样调用：@include link-colors(red) </div><div class="line">// $hover和$visited也会被自动赋值为red。</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>继承@extend</strong>  注意继承和混合之间的关系<br>混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。   </li>
<li>关于<code>@extend</code>有两个要点你应该知道<br>跟混合器相比，继承生成的css代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的css体积更小。如果你非常关心你站点的速度，请牢记这一点。<br>继承遵从css层叠的规则。当两个不同的css规则应用到同一个html元素上时，并且这两个不同的css规则对同一属性的修饰存在不同的值，css层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。 </li>
<li>但有一个前提就是，不要用后代选择器去继承。</li>
</ul>
<h3 id="sass-和-scss的区别"><a href="#sass-和-scss的区别" class="headerlink" title=".sass 和.scss的区别"></a>.sass 和.scss的区别</h3><p>区别是书写格式 .sass 采用无分号<code>;</code>和无<code>{}</code>使用缩进表示层级关系<br>.scss采用css中常用的来表示 更加容易接受 也更常用和推荐</p>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小知识点tips]]></title>
      <url>/blog/2017/06/14/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9tips/</url>
      <content type="html"><![CDATA[<h3 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h3><ul>
<li><a href="https://github.com/Allenice/ohana#ch" target="_blank" rel="external">node接口模拟返回</a></li>
<li><a href="http://www.cnblogs.com/zoumiaomiao/p/4913230.html" target="_blank" rel="external">js接口模拟数据</a></li>
<li><a href="https://gold.xitu.io/entry/5828477fda2f600056dca3b6" target="_blank" rel="external">mockjs</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="external">mocha js 测试框架–教程</a></li>
<li><a href="http://gold.xitu.io/post/582bd0b4da2f600063d4f89e" target="_blank" rel="external">git 教程 全面理解Git</a><blockquote>
<p><img src="http://ac-myg6wstv.clouddn.com/fea7461e85aee80bbe96.png" alt="git原理图"><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git 教程</a></p>
</blockquote>
</li>
<li><a href="http://www.moye.me/2016/11/19/nightmare/" target="_blank" rel="external">爬虫的终极形态：nightmare</a></li>
<li><p><a href="https://github.com/amfe/article/issues/17" target="_blank" rel="external">移动端h5适配–flexible</a></p>
</li>
<li><p><a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="external">node npm等命令–初级教程</a></p>
</li>
</ul>
<h4 id="1行代码创建服务器"><a href="#1行代码创建服务器" class="headerlink" title="1行代码创建服务器"></a>1行代码创建服务器</h4><p>先全局安装http-server</p>
<ul>
<li>npm install http-server -g</li>
<li>cmd中切换到当前目录</li>
<li>运行 http-server 即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install http-server -g</div><div class="line">切换到当前静态网页的目录 </div><div class="line">采用http-server 运行即可</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="或使用express的static新建server"><a href="#或使用express的static新建server" class="headerlink" title="或使用express的static新建server"></a>或使用express的static新建server</h4><p><a href="http://www.expressjs.com.cn/starter/static-files.html" target="_blank" rel="external">express -static–参看</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">可以使用express 快速新建express路由项目[express 应用生成器--参看](http://www.expressjs.com.cn/starter/generator.html)</div><div class="line"></div><div class="line"></div><div class="line">app.use(&apos;/s&apos;, express.static(&apos;./sta&apos;));</div></pre></td></tr></table></figure></p>
<h4 id="在浏览器-console-中执行"><a href="#在浏览器-console-中执行" class="headerlink" title="在浏览器 console 中执行"></a>在浏览器 console 中执行</h4><p><code>document.body.contentEditable=true</code>     或<br><code>document.designMode=&quot;on&quot;</code><br><strong>就可以直接修改页面上的任何文字了</strong></p>
<h4 id="自建博客HEXO"><a href="#自建博客HEXO" class="headerlink" title="自建博客HEXO"></a>自建博客HEXO</h4><p>npm 安装  <code>npm install hexo -g</code></p>
<p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">hexo</a></p>
<h3 id="北邮大地址"><a href="#北邮大地址" class="headerlink" title="北邮大地址"></a>北邮大地址</h3><p><a href="http://byr.wiki/" target="_blank" rel="external">http://byr.wiki/</a></p>
<h3 id="压缩图片-图片压缩网站"><a href="#压缩图片-图片压缩网站" class="headerlink" title="压缩图片 图片压缩网站"></a>压缩图片 图片压缩网站</h3><p><a href="https://tinypng.com/" target="_blank" rel="external">https://tinypng.com/</a></p>
<h3 id="个人备注地址"><a href="#个人备注地址" class="headerlink" title="个人备注地址"></a>个人备注地址</h3><p><a href="https://zhuanlan.zhihu.com/p/23340209" target="_blank" rel="external">西部世界 s08</a></p>
<h4 id="下载youtube视频"><a href="#下载youtube视频" class="headerlink" title="下载youtube视频"></a>下载youtube视频</h4><p><a href="http://jingyan.baidu.com/article/39810a23d2deb2b637fda66c.html" target="_blank" rel="external">下载youtube</a></p>
<ul>
<li>进入 <a href="en.savefrom.net">en.savefrom.net</a> 粘贴youtube播放地址即可</li>
<li>进入<a href="http://www.clipconverter.cc/" target="_blank" rel="external">http://www.clipconverter.cc/</a></li>
</ul>
<h4 id="git-解决冲突"><a href="#git-解决冲突" class="headerlink" title="git 解决冲突"></a>git 解决冲突</h4><p>#　下载冲突到缓存区</p>
<ul>
<li>git fetch 　远程到　本地仓库</li>
<li>git rebase  本地仓库　和本地合并　　（）</li>
</ul>
<p>查找head 手动 合并 代码 </p>
<p>开始</p>
<ul>
<li>git add  add文件</li>
<li>git commit 添加</li>
<li>git pull 更新</li>
<li>git push 提交</li>
</ul>
<p>处理流程 小乌龟</p>
<ul>
<li>commit </li>
<li><ul>
<li>fetch </li>
</ul>
</li>
<li><ul>
<li>rebase </li>
</ul>
</li>
<li><ul>
<li>stash  暂存 </li>
</ul>
</li>
<li><ul>
<li>push </li>
</ul>
</li>
<li><ul>
<li>stash pop  还原</li>
</ul>
</li>
</ul>
<h4 id="自制markdown文档-docute"><a href="#自制markdown文档-docute" class="headerlink" title="自制markdown文档 docute"></a>自制markdown文档 docute</h4><p><a href="https://docute.js.org/#/home?id=introduction" target="_blank" rel="external">docute</a> <a href="https://docute.js.org/#/home?id=introduction" target="_blank" rel="external">https://docute.js.org/#/home?id=introduction</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// quick start</div><div class="line">npm i -g docute-cli</div><div class="line"></div><div class="line">docute init ./docs</div><div class="line">docute</div></pre></td></tr></table></figure></p>
<h4 id="工具-趋势"><a href="#工具-趋势" class="headerlink" title="工具 趋势"></a>工具 趋势</h4><ul>
<li><a href="https://www.awesomes.cn/" target="_blank" rel="external">web前端趋势</a></li>
<li><a href="https://www.sdk.cn/site/index" target="_blank" rel="external">https://www.sdk.cn/site/index</a></li>
<li><a href="http://www.javascript.fun/" target="_blank" rel="external">js 框架趋势</a></li>
<li><a href="http://bestof.js.org/" target="_blank" rel="external">best of js</a></li>
<li><a href="http://f2er.club/" target="_blank" rel="external">最牛前端</a></li>
</ul>
<h4 id="自动抢红包"><a href="#自动抢红包" class="headerlink" title="自动抢红包"></a>自动抢红包</h4><p><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="external">自动抢红包</a></p>
<h4 id="微信小程序大全"><a href="#微信小程序大全" class="headerlink" title="微信小程序大全"></a>微信小程序大全</h4><p><a href="http://www.duba.com/wxapp/?f=mobile" target="_blank" rel="external">微信小程序导航</a><br><a href="https://minapp.com/miniapp/" target="_blank" rel="external">知晓– 微信小程序大全</a></p>
<h4 id="文件命名小写-下划线-特殊的可以采用大写-如-README"><a href="#文件命名小写-下划线-特殊的可以采用大写-如-README" class="headerlink" title="文件命名小写+ 下划线  特殊的可以采用大写 如:README"></a>文件命名小写+ 下划线  特殊的可以采用大写 如:README</h4><p><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="external">链接地址</a></p>
<h4 id="lt-map-id-quot-id-quot-gt-lt-img-usemap-quot-id-quot-gt-图像中的map定位"><a href="#lt-map-id-quot-id-quot-gt-lt-img-usemap-quot-id-quot-gt-图像中的map定位" class="headerlink" title="&lt;map id=&quot;id&quot;&gt; &lt;img usemap=&quot;#id&quot;&gt; 图像中的map定位"></a><code>&lt;map id=&quot;id&quot;&gt;</code> <code>&lt;img usemap=&quot;#id&quot;&gt;</code> 图像中的map定位</h4><p><img src="http://upload-images.jianshu.io/upload_images/2531512-bb3ed960f0b47a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h4 id="查询浏览器bug的网站"><a href="#查询浏览器bug的网站" class="headerlink" title="查询浏览器bug的网站"></a>查询浏览器bug的网站</h4><p><a href="https://bugs.chromium.org/p/chromium/issues/list" target="_blank" rel="external">https://bugs.chromium.org/p/chromium/issues/list</a><br><a href="http://ued.ctrip.com/blog/crash-app-by-css.html" target="_blank" rel="external">css也能让浏览器崩溃</a></p>
<h4 id="vue单页面应用打包和优化"><a href="#vue单页面应用打包和优化" class="headerlink" title="vue单页面应用打包和优化"></a>vue单页面应用打包和优化</h4><p><a href="https://shuirong.github.io/2017/05/07/Vue-SPA-%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8-%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/" target="_blank" rel="external">vue单页面应用打包和优化</a></p>
<h3 id="js-substring-start-end-substr-start-length"><a href="#js-substring-start-end-substr-start-length" class="headerlink" title="js substring(start, end)  substr(start[,length])"></a>js <code>substring(start, end)</code>  <code>substr(start[,length])</code></h3><ul>
<li><code>substring</code>用于提取字符串中 介于两个指定下标的字符</li>
<li><code>substr</code> 用于返回一个指定位置开始的指定长度的字符串<br>详见 <a href="http://www.cnblogs.com/wz327/archive/2010/04/11/1709433.html" target="_blank" rel="external">http://www.cnblogs.com/wz327/archive/2010/04/11/1709433.html</a></li>
</ul>
<h3 id="关于node的版本"><a href="#关于node的版本" class="headerlink" title="关于node的版本"></a>关于node的版本</h3><p>node的版本更新常常会弃用部分API和新增API 最好使用LTS版本 项目中<br>如果科研或技术预研的话 可以采用最新版本 </p>
<h3 id="个人习惯"><a href="#个人习惯" class="headerlink" title="个人习惯"></a>个人习惯</h3><p>1.java tomcat eclise nodejs 安装到D盘<br>2.文档放在E盘<br>3.F盘是共享和备注</p>
]]></content>
      
        
        <tags>
            
            <tag> 技术文章 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
